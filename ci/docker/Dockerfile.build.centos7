# -*- mode: dockerfile -*-
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# Dockerfile for CentOS 7 based builds.
# Via the CentOS 7 Dockerfiles, we ensure MXNet continues to run fine on older systems.
#
# See docker-compose.yml for supported BASE_IMAGE ARGs and targets.

####################################################################################################
# The Dockerfile uses a dynamic BASE_IMAGE (for example centos:7,
# nvidia/cuda:10.2-cudnn7-devel-centos7 etc).
# On top of BASE_IMAGE we install all dependencies shared by all MXNet build
# environments into a "base" target. At the end of this file, we specialize
# "base" for specific usecases. The target built by docker can be selected via
# "--target" option or docker-compose.yml
####################################################################################################
ARG BASE_IMAGE
FROM $BASE_IMAGE AS base

WORKDIR /work/deps

RUN yum -y check-update || true && \
    yum -y install epel-release centos-release-scl && \
    yum install -y \
        # Utilities
        wget \
        unzip \
        patchelf \
        pandoc \
        # Development tools
        git \
        make \
        ninja-build \
        automake \
        autoconf \
        libtool \
        protobuf-compiler \
        protobuf-devel \
        # CentOS Software Collections https://www.softwarecollections.org
        devtoolset-7 \
        llvm-toolset-7.0 \
        llvm-toolset-7.0-libomp-devel \
        rh-python36 \
        rh-maven35 \
        # Libraries
        # Provide clbas headerfiles
        atlas-devel \
        openblas-devel \
        lapack-devel \
        opencv-devel \
        openssl-devel \
        zeromq-devel \
        # Build-dependencies for ccache 3.7.9
        gperf \
        libb2-devel \
        libzstd-devel && \
    yum clean all

# Make Clang, Python 3.6 and Maven 3.3 Software Collections available during following build steps
SHELL [ "/usr/bin/scl", "enable", "llvm-toolset-7.0", "rh-python36", "rh-maven35" ]

# Install minimum required cmake version
RUN cd /usr/local/src && \
    wget -nv https://cmake.org/files/v3.13/cmake-3.13.5-Linux-x86_64.sh && \
    sh cmake-3.13.5-Linux-x86_64.sh --prefix=/usr/local --skip-license && \
    rm cmake-3.13.5-Linux-x86_64.sh

# ccache 3.7.9 has fixes for caching nvcc outputs
RUN cd /usr/local/src && \
    git clone --recursive https://github.com/ccache/ccache.git && \
    cd ccache && \
    git checkout v3.7.9 && \
    ./autogen.sh && \
    ./configure --disable-man && \
    make -j$(nproc) && \
    make install && \
    cd /usr/local/src && \
    rm -rf ccache

# NCCL is missing on CentOS7 images https://gitlab.com/nvidia/container-images/cuda/-/issues/68
# Install manually if this is a GPU image; different Cuda versions require different NCCL versions
# https://wiki.bash-hackers.org/syntax/pe#search_and_replace
# We need to redeclare ARG due to
# https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact
ARG BASE_IMAGE
RUN export SHORT_CUDA_VERSION=${CUDA_VERSION%.*} && \
    if [[ "$BASE_IMAGE" == *"nvidia/cuda"* ]]; then \
        if [[ ${SHORT_CUDA_VERSION} == 9.2 ]]; then \
            export NCCL_VERSION=2.4.8; \
        elif [[ ${SHORT_CUDA_VERSION} == 10.* ]]; then \
            export NCCL_VERSION=2.6.4; \
        else \
            echo "ERROR: Cuda ${SHORT_CUDA_VERSION} not yet supported in Dockerfile.build.centos7"; \
            exit 1; \
        fi && \
        curl -fsSL https://developer.download.nvidia.com/compute/machine-learning/repos/rhel7/x86_64/nvidia-machine-learning-repo-rhel7-1.0.0-1.x86_64.rpm -O && \
        rpm -i nvidia-machine-learning-repo-rhel7-1.0.0-1.x86_64.rpm && \
        yum -y check-update || true && \
        yum -y install \
            libnccl-${NCCL_VERSION}-1+cuda${SHORT_CUDA_VERSION} \
            libnccl-devel-${NCCL_VERSION}-1+cuda${SHORT_CUDA_VERSION} \
            libnccl-static-${NCCL_VERSION}-1+cuda${SHORT_CUDA_VERSION} && \
        yum clean all; \
    fi

# Flang fortran compiler as replacement for gfortran due to the resulting
# runtime dependency on libgfortran.so which is GPL-licensed and thus
# https://www.apache.org/legal/resolved.html#category-x for distribution.
# We need a Fortran compiler to compile the OpenBLAS Lapack implementation.
# NOTE: The flang toolchain also provides llvm libomp.so and libomp.a. We must
# use the libomp provided by flang for all parts of the project, to avoid
# linking multiple omp implementations. Linking 2 different llvm omp's would
# cause segfaults on importing mxnet. In the next step we'll install compatible
# omp headers.
RUN cd /usr/local/ && mkdir flang && cd flang && \
    wget -nv https://github.com/flang-compiler/flang/releases/download/flang_20190329/flang-20190329-x86-70.tgz && \
    tar xf flang-20190329-x86-70.tgz && \
    rm flang-20190329-x86-70.tgz && \
    # IMPORTANT: Replace libomp.so with the flang version, to avoid segfault upon importing MXNet
    cp /usr/local/flang/lib/libomp.so /opt/rh/llvm-toolset-7.0/root/usr/lib64/libomp.so

# Python dependencies
COPY install/requirements /work/
RUN python -m pip install --no-cache-dir --upgrade pip && \
    python -m pip install --no-cache-dir -r /work/requirements

# Fix the en_DK.UTF-8 locale to test locale invariance
RUN localedef -i en_DK -f UTF-8 en_DK.UTF-8

ARG USER_ID=0
COPY install/docker_filepermissions.sh /work/
RUN /work/docker_filepermissions.sh

ENV PYTHONPATH=./python/
# Verify that MXNet works correctly when the C locale is set to a locale that uses a comma as the
# decimal separator. Please see #16134 for an example of a bug caused by incorrect handling of
# number serialization and deserialization.
ENV LC_NUMERIC=en_DK.UTF-8
WORKDIR /work/mxnet

COPY runtime_functions.sh /work/
