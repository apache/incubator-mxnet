% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mxnet_generated.R
\name{mx.nd.Reshape}
\alias{mx.nd.Reshape}
\title{Reshape input according to a target shape spec.
The target shape is a tuple and can be a simple list of dimensions such as (12,3) or it can incorporate special codes that correspond to contextual operations that refer to the input dimensions.
The special codes are all expressed as integers less than 1. These codes effectively refer to a machine that pops input dims off the beginning of the input dims list and pushes resulting output dims onto the end of the output dims list, which starts empty. The codes are:
  0  Copy     Pop one input dim and push it onto the output dims
 -1  Infer    Push a dim that is inferred later from all other output dims
 -2  CopyAll  Pop all remaining input dims and push them onto output dims
 -3  Merge2   Pop two input dims, multiply them, and push result
 -4  Split2   Pop one input dim, and read two next target shape specs,
              push them both onto output dims (either can be -1 and will
              be inferred from the other
 The exact mathematical behavior of these codes is given in the description of the 'shape' parameter. All non-codes (positive integers) just pop a dim off the input dims (if any), throw it away, and then push the specified integer onto the output dims.
Examples:
Type     Input      Target            Output
Copy     (2,3,4)    (4,0,2)           (4,3,2)
Copy     (2,3,4)    (2,0,0)           (2,3,4)
Infer    (2,3,4)    (6,1,-1)          (6,1,4)
Infer    (2,3,4)    (3,-1,8)          (3,1,8)
CopyAll  (9,8,7)    (-2)              (9,8,7)
CopyAll  (9,8,7)    (9,-2)            (9,8,7)
CopyAll  (9,8,7)    (-2,1,1)          (9,8,7,1,1)
Merge2   (3,4)      (-3)              (12)
Merge2   (3,4,5)    (-3,0)            (12,5)
Merge2   (3,4,5)    (0,-3)            (3,20)
Merge2   (3,4,5,6)  (-3,0,0)          (12,5,6)
Merge2   (3,4,5,6)  (-3,-2)           (12,5,6)
Split2   (12)       (-4,6,2)          (6,2)
Split2   (12)       (-4,2,6)          (2,6)
Split2   (12)       (-4,-1,6)         (2,6)
Split2   (12,9)     (-4,2,6,0)        (2,6,9)
Split2   (12,9,9,9) (-4,2,6,-2)       (2,6,9,9,9)
Split2   (12,12)    (-4,2,-1,-4,-1,2) (2,6,6,2)}
\arguments{
\item{data}{Symbol
Input data to reshape.}

\item{target.shape}{Shape(tuple), optional, default=(0,0)
(Deprecated! Use shape instead.) Target new shape. One and only one dim can be 0, in which case it will be inferred from the rest of dims}

\item{keep.highest}{boolean, optional, default=False
(Deprecated! Use shape instead.) Whether keep the highest dim unchanged.If set to true, then the first dim in target_shape is ignored,and always fixed as input}

\item{shape}{, optional, default=()
    Target shape, a tuple, t=(t_1,t_2,..,t_m).
Let the input dims be s=(s_1,s_2,..,s_n).
The output dims u=(u_1,u_2,..,u_p) are computed from s and t.
The target shape tuple elements t_i are read in order, and used to  generate successive output dims u_p:
t_i:       meaning:      behavior:
+ve        explicit      u_p = t_i
0          copy          u_p = s_i
-1         infer         u_p = (Prod s_i) / (Prod u_j | j != p)
-2         copy all      u_p = s_i, u_p+1 = s_i+1, ...
-3         merge two     u_p = s_i * s_i+1
-4,a,b     split two     u_p = a, u_p+1 = b | a * b = s_i
The split directive (-4) in the target shape tuple is followed by two dimensions, one of which can be -1, which means it will be inferred from the other one and the original dimension.
The can only be one globally inferred dimension (-1), aside from any -1 occuring in a split directive.}

\item{reverse}{boolean, optional, default=False
Whether to match the shapes from the backward. If reverse is true, 0 values in the `shape` argument will be searched from the backward. E.g the original shape is (10, 5, 4) and the shape argument is (-1, 0). If reverse is true, the new shape should be (50, 4). Otherwise it will be (40, 5).}
}
\value{
out The result mx.ndarray
}
\description{
Reshape input according to a target shape spec.
The target shape is a tuple and can be a simple list of dimensions such as (12,3) or it can incorporate special codes that correspond to contextual operations that refer to the input dimensions.
The special codes are all expressed as integers less than 1. These codes effectively refer to a machine that pops input dims off the beginning of the input dims list and pushes resulting output dims onto the end of the output dims list, which starts empty. The codes are:
  0  Copy     Pop one input dim and push it onto the output dims
 -1  Infer    Push a dim that is inferred later from all other output dims
 -2  CopyAll  Pop all remaining input dims and push them onto output dims
 -3  Merge2   Pop two input dims, multiply them, and push result
 -4  Split2   Pop one input dim, and read two next target shape specs,
              push them both onto output dims (either can be -1 and will
              be inferred from the other
 The exact mathematical behavior of these codes is given in the description of the 'shape' parameter. All non-codes (positive integers) just pop a dim off the input dims (if any), throw it away, and then push the specified integer onto the output dims.
Examples:
Type     Input      Target            Output
Copy     (2,3,4)    (4,0,2)           (4,3,2)
Copy     (2,3,4)    (2,0,0)           (2,3,4)
Infer    (2,3,4)    (6,1,-1)          (6,1,4)
Infer    (2,3,4)    (3,-1,8)          (3,1,8)
CopyAll  (9,8,7)    (-2)              (9,8,7)
CopyAll  (9,8,7)    (9,-2)            (9,8,7)
CopyAll  (9,8,7)    (-2,1,1)          (9,8,7,1,1)
Merge2   (3,4)      (-3)              (12)
Merge2   (3,4,5)    (-3,0)            (12,5)
Merge2   (3,4,5)    (0,-3)            (3,20)
Merge2   (3,4,5,6)  (-3,0,0)          (12,5,6)
Merge2   (3,4,5,6)  (-3,-2)           (12,5,6)
Split2   (12)       (-4,6,2)          (6,2)
Split2   (12)       (-4,2,6)          (2,6)
Split2   (12)       (-4,-1,6)         (2,6)
Split2   (12,9)     (-4,2,6,0)        (2,6,9)
Split2   (12,9,9,9) (-4,2,6,-2)       (2,6,9,9,9)
Split2   (12,12)    (-4,2,-1,-4,-1,2) (2,6,6,2)
}

